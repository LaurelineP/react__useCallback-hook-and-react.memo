{
  "name": "usecallback-and-reactmemo",
  "version": "1.0.0",
  "description": "Understand how to avoid unecessary rerenders using\n- useCallback: to avoid re-creating a function ( == memorizing the function )\n- React.memo ( !== useMemo ): to avoid re-rendering a component if its inputs ( props ) did not change ( cf. useCallBack => does not re-create a func )",
  "keywords": [],
  "main": "src/index.js",
  "dependencies": {
    "@babel/core": "7.12.13",
    "@babel/plugin-transform-react-jsx": "7.12.13",
    "react": "17.0.1",
    "react-dom": "17.0.1",
    "react-scripts": "4.0.2",
    "sass": "1.32.7"
  },
  "devDependencies": {
    "typescript": "3.8.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]
}